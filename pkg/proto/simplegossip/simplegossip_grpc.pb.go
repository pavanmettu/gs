// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.8
// source: simplegossip/simplegossip.proto

package simplegossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GossipServiceClient is the client API for GossipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipServiceClient interface {
	SubmitMessage(ctx context.Context, in *SubmitMessageStruct, opts ...grpc.CallOption) (*SubmitMessageRes, error)
	QueryMessage(ctx context.Context, in *QueryMessageStruct, opts ...grpc.CallOption) (*QueryMessageRes, error)
	ListMessage(ctx context.Context, in *ListMessageStruct, opts ...grpc.CallOption) (*ListMessageRes, error)
	GossipMessage(ctx context.Context, in *GossipMessageStruct, opts ...grpc.CallOption) (*GossipMessageRes, error)
	ResyncMessages(ctx context.Context, in *ResyncMessagesStruct, opts ...grpc.CallOption) (*ResyncMessagesRes, error)
}

type gossipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipServiceClient(cc grpc.ClientConnInterface) GossipServiceClient {
	return &gossipServiceClient{cc}
}

func (c *gossipServiceClient) SubmitMessage(ctx context.Context, in *SubmitMessageStruct, opts ...grpc.CallOption) (*SubmitMessageRes, error) {
	out := new(SubmitMessageRes)
	err := c.cc.Invoke(ctx, "/gossip.GossipService/SubmitMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipServiceClient) QueryMessage(ctx context.Context, in *QueryMessageStruct, opts ...grpc.CallOption) (*QueryMessageRes, error) {
	out := new(QueryMessageRes)
	err := c.cc.Invoke(ctx, "/gossip.GossipService/QueryMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipServiceClient) ListMessage(ctx context.Context, in *ListMessageStruct, opts ...grpc.CallOption) (*ListMessageRes, error) {
	out := new(ListMessageRes)
	err := c.cc.Invoke(ctx, "/gossip.GossipService/ListMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipServiceClient) GossipMessage(ctx context.Context, in *GossipMessageStruct, opts ...grpc.CallOption) (*GossipMessageRes, error) {
	out := new(GossipMessageRes)
	err := c.cc.Invoke(ctx, "/gossip.GossipService/GossipMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipServiceClient) ResyncMessages(ctx context.Context, in *ResyncMessagesStruct, opts ...grpc.CallOption) (*ResyncMessagesRes, error) {
	out := new(ResyncMessagesRes)
	err := c.cc.Invoke(ctx, "/gossip.GossipService/ResyncMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipServiceServer is the server API for GossipService service.
// All implementations must embed UnimplementedGossipServiceServer
// for forward compatibility
type GossipServiceServer interface {
	SubmitMessage(context.Context, *SubmitMessageStruct) (*SubmitMessageRes, error)
	QueryMessage(context.Context, *QueryMessageStruct) (*QueryMessageRes, error)
	ListMessage(context.Context, *ListMessageStruct) (*ListMessageRes, error)
	GossipMessage(context.Context, *GossipMessageStruct) (*GossipMessageRes, error)
	ResyncMessages(context.Context, *ResyncMessagesStruct) (*ResyncMessagesRes, error)
	mustEmbedUnimplementedGossipServiceServer()
}

// UnimplementedGossipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGossipServiceServer struct {
}

func (UnimplementedGossipServiceServer) SubmitMessage(context.Context, *SubmitMessageStruct) (*SubmitMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMessage not implemented")
}
func (UnimplementedGossipServiceServer) QueryMessage(context.Context, *QueryMessageStruct) (*QueryMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMessage not implemented")
}
func (UnimplementedGossipServiceServer) ListMessage(context.Context, *ListMessageStruct) (*ListMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessage not implemented")
}
func (UnimplementedGossipServiceServer) GossipMessage(context.Context, *GossipMessageStruct) (*GossipMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GossipMessage not implemented")
}
func (UnimplementedGossipServiceServer) ResyncMessages(context.Context, *ResyncMessagesStruct) (*ResyncMessagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncMessages not implemented")
}
func (UnimplementedGossipServiceServer) mustEmbedUnimplementedGossipServiceServer() {}

// UnsafeGossipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipServiceServer will
// result in compilation errors.
type UnsafeGossipServiceServer interface {
	mustEmbedUnimplementedGossipServiceServer()
}

func RegisterGossipServiceServer(s grpc.ServiceRegistrar, srv GossipServiceServer) {
	s.RegisterService(&GossipService_ServiceDesc, srv)
}

func _GossipService_SubmitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMessageStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).SubmitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipService/SubmitMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).SubmitMessage(ctx, req.(*SubmitMessageStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipService_QueryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessageStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).QueryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipService/QueryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).QueryMessage(ctx, req.(*QueryMessageStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipService_ListMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).ListMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipService/ListMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).ListMessage(ctx, req.(*ListMessageStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipService_GossipMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMessageStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).GossipMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipService/GossipMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).GossipMessage(ctx, req.(*GossipMessageStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipService_ResyncMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncMessagesStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).ResyncMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.GossipService/ResyncMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).ResyncMessages(ctx, req.(*ResyncMessagesStruct))
	}
	return interceptor(ctx, in, info, handler)
}

// GossipService_ServiceDesc is the grpc.ServiceDesc for GossipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GossipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.GossipService",
	HandlerType: (*GossipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMessage",
			Handler:    _GossipService_SubmitMessage_Handler,
		},
		{
			MethodName: "QueryMessage",
			Handler:    _GossipService_QueryMessage_Handler,
		},
		{
			MethodName: "ListMessage",
			Handler:    _GossipService_ListMessage_Handler,
		},
		{
			MethodName: "GossipMessage",
			Handler:    _GossipService_GossipMessage_Handler,
		},
		{
			MethodName: "ResyncMessages",
			Handler:    _GossipService_ResyncMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simplegossip/simplegossip.proto",
}
